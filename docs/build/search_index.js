var documenterSearchIndex = {"docs":
[{"location":"Extreme/Extreme_Value_theory.html#Extreme_theory","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Extreme value copulas are fundamental in the study of rare and extreme events due to their ability to model dependency in situations of extreme risk. An extreme value copula C has the property that C(u_1^t u_2^t)=(C(u_1u_2))^t t  0 and can be represented by C(u_1 u_2)=exp-ell(log(u_1)log(u_2)) or C(u_1u_2)=expleftlog(u_1u_2)Aleft(fraclog(u_1)log(u_1u_2)right)right  Here, ell(cdot) is the stable tail dependence function and A is the Pickands dependence function where A 01 to 12 1 is a convex function satisfying max(t t-1)leq A(t) leq 1 In the context of bivariate extreme value copulas, the functions ell and A are related as follows: ell(u_1u_2)=(u_1+u_2)Aleft(fracu_1u_1+u_2right) Therefore, in TwinCopulas, it is sufficient to provide the Pickands dependence function A to construct the implementation structure of an extreme value copula.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"In this package, there is an abstract type [ExtremeValueCopula] that provides a foundation for defining extreme value copulas. Many extreme value copulas are already implemented for you! See [the list of implemented extreme value copulas] to get an overview.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"If you do not find the one you need, you may define it yourself by subtyping ExtremeValueCopula. The API does not require much information, which is really convenient. Only the following method is required:","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"ùòà(C::ExtremeValueCopula) =","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"By providing this functions, you can easily create a new extreme value copula that fits your specific needs.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"struct MyExtremeValueCopula{P} <: ExtremeValueCopula{P}\n    Œ∏::P\nend\n\nùòà(C::ExtremeValueCopula, t) = (t^C.Œ∏ + (1 - t)^C.Œ∏)^(1/C.Œ∏) # This is the Pickands function of the Logistic (Gumbel) Copula","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"info: Nomenclature information\nWe have called ùòà() the Pickands function, which is necessary for constructing the Extreme Value Copula. The letter we use is \\isansA.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html#Advanced-Concepts","page":"Extreme Value Copulas","title":"Advanced Concepts","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Here, we present some important concepts from the theory of extreme value copulas that are useful for the development of this package.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Let (XY) sim C where C is a bivariate extreme value copula. We have the following results:","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Proposition 1 ([Ghoudi1998]): Let (X Y) sim C, where C is an extreme value copula. The joint distribution of X and Z = fraclog(X)log(XY) is given by:P(Z leq z X leq x) =G(zx)=left(z + z(1-z)fracA(z)A(z)right)x^A(z)z quad 0leq xz leq 1where A(z) denotes the derivate of function A(z) at point z","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Since A is a convex function defined on 0 1 and satisfies -1 leq A(z) leq 1, by extension, we define A(1) as the supremum of A(z) over (0 1). By setting x = 1 in the previous result, we obtain the marginal distribution of Z: P(Z leq z) = G_Z(z) = z + z(1 - z) fracA(z)A(z) quad 0 leq z leq 1","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"This result was demonstrated by Deheuvels (1991) in the case where A admits a second derivative.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html#Simulation-of-Bivariate-Extreme-Value-Distributions","page":"Extreme Value Copulas","title":"Simulation of Bivariate Extreme Value Distributions","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"To simulate a bivariate extreme value distribution C(x y), if F_1 and F_2 are univariate extreme value distributions, then the pair ( F_1^-1(X) F_2^-1(Y) ) is distributed according to a bivariate extreme value distribution. The proposed algorithm allows simulating such a distribution.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Assume A has a second derivative, making the distribution F absolutely continuous. In this case, Z is also absolutely continuous and has a density g_Z(z) given by: g_Z(z) = fracddz G_Z(z) = 1 + (1 - z)^-1 left(A(z) - z A(z)right)","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"The conditional distribution of W given Z is: F(wz) = frac1g_Z(z) fracddz F(z w) ","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Which simplifies to: F(wz) = w fracz(1 - z) A(z)A(z) g_Z(z) + (w - w log w) left(1 - fracz(1 - z) A(z)A(z) g_Z(z) right)","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Given Z, the distribution of W is uniform on (0 1) with probability p(Z) and equals the product of two independent uniforms on (0 1) with probability 1 - p(Z), where: p(z) = fracz(1 - z) A(z)A(z) g_Z(z)","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Since g_Z(z) is the derivative of the cumulative distribution function of Z, it holds that 0 leq p(z) leq 1.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"For the class of Extreme Value Copulas, we propose two different algorithms to generate samples from a copula.","category":"page"},{"location":"Extreme/Extreme_Value_theory.html#Conditional-Sampling-for-Bivariate-Extreme-Value-Copulas","page":"Extreme Value Copulas","title":"Conditional Sampling for Bivariate Extreme Value Copulas","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"When this is defined, TwinCopulas uses Algorithm 1, introduced in [reference], to sample from the copula and its derivative as follows. We adapt Algorithm 1 from  [reference] for the case of bivariate Extreme Value Copulas. The input for the algorithm is a bivariate Extreme Value Copula C 01^2 to 01","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Algotithm 1: Bivariate Extreme Value Copulas(1) Simulate U_2 sim mathcalU01(2) Compute (the right continuous version of) the function F_U_1U_2(u_1)=fracpartialpartial u_2C(u_1u_2)=fracC(u_1u_2)u_2leftAleft(fraclog(u_1)log(u_1u_2)right) - log(u_1)Aleft(fraclog(u_1)log(u_1u_2)right)right quad u_2 in 01 (3) Compute de generalized inverse of F_U_1U_2 i.e F^-1_U_1U_2(v)=infu_1  0 F_U_1U_2(u_1)geq v quad v in 01  (4) Simulate V sim mathcalU01 independent of U_2(5) Set U_1 = F^-1_U_1U_2(V) and return (U_1 U_2)","category":"page"},{"location":"Extreme/Extreme_Value_theory.html#Sampling-from-Archimedean-Copula-Using-Frailty-Distribution","page":"Extreme Value Copulas","title":"Sampling from Archimedean Copula Using Frailty Distribution","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html#Algorithm","page":"Extreme Value Copulas","title":"Algorithm","text":"","category":"section"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Here, is a detailed algorithm for sampling from bivariate Extreme Value Copulas proposed by Ghoudi:","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"Algotithm 2: Bivariate Extreme Value Copulas(1) Simulate U_1U_2 sim mathcalU01(2) Simulate Z sim G_Z(z) (3) Select W=U_1 with probability p(Z) and W=U_1U_2 with probability 1-p(Z)(4) Return X=W^ZA(Z) and Y=W^(1-Z)A(Z)  ","category":"page"},{"location":"Extreme/Extreme_Value_theory.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"We can use either of the two algorithms to generate random samples, and more specifically, by default, TwinCopulas uses Algorithm 2 to obtain samples from a bivariate extreme value copula.","category":"page"},{"location":"Elliptical/Avaliable_Elliptical_models.html#Elliptical_models","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"","category":"section"},{"location":"Elliptical/Avaliable_Elliptical_models.html#GaussianCopula","page":"Elliptical Copulas","title":"GaussianCopula","text":"","category":"section"},{"location":"Elliptical/Avaliable_Elliptical_models.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"GaussianCopula","category":"page"},{"location":"Elliptical/Avaliable_Elliptical_models.html#TwinCopulas.GaussianCopula","page":"Elliptical Copulas","title":"TwinCopulas.GaussianCopula","text":"GaussianCopula{P}\n\nFields:\n\nŒ∏::Real - Parameter \n\nConstructor\n\nGaussianCopula(Œ∏)\n\nThe bivariate Gaussian copula. It is constructed as: \n\nC(u_1 u_2 theta) = Phi_theta(Phi^-1(u_1)Phi^-1(u_2))\n\nwhere Phi_theta is the cumulative distribution function (CDF) of a standard bivariate normal distribution with correlation coefficient theta in  -1 1 and Phi^-1is the quantile function of the standard normal distribution.\n\nIt has a few special cases:\n\nWhen Œ∏ = -1, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen Œ∏ = 0, it is the IndependentCopula\nWhen Œ∏ = 1, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Elliptical/Avaliable_Elliptical_models.html#tCopula","page":"Elliptical Copulas","title":"tCopula","text":"","category":"section"},{"location":"Elliptical/Avaliable_Elliptical_models.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"tCopula","category":"page"},{"location":"Elliptical/Avaliable_Elliptical_models.html#TwinCopulas.tCopula","page":"Elliptical Copulas","title":"TwinCopulas.tCopula","text":"tCopula{P}\n\nFields:     - ŒΩ::Real - paremeter     - Œ∏::Real - Parameter \n\nConstructor\n\ntCopula(ŒΩ, Œ∏)\n\nThe bivariate t copula. It is constructed as: \n\nC(u_1 u_2 nu theta) = t_nu theta(t_nu^-1(u_1)t_nu^-1(u_2))\n\nwhere t_nu theta is the cumulative distribution function (CDF) of a bivariate t-distribution with nu in mathbbR^+ degrees of freedom, zero means, and correlation theta in -1 1, and t_nu^-1 is the quantile function of the standard t-distribution with nu degrees of freedom.\n\nIt has a few special cases:\n\nWhen Œ∏ = -1, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen Œ∏ = 0, it is the IndependentCopula\nWhen Œ∏ = 1, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\noe, Harry. Dependence modeling with Copulas. Chapman & Hall, 2014.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#Others_models","page":"Other Copulas","title":"Other Copulas","text":"","category":"section"},{"location":"Others.html#RafteryCopula","page":"Other Copulas","title":"RafteryCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"RafteryCopula","category":"page"},{"location":"Others.html#TwinCopulas.RafteryCopula","page":"Other Copulas","title":"TwinCopulas.RafteryCopula","text":"RafteryCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nRafteryCopula(Œ∏)\n\nThe bivariate Raftery Copula is parameterized by theta in 01. It is constructed as: \n\nC(u_1 u_2) = minu_1u_2 +frac1-theta1+theta(u_1u_2)^1(1-theta)left 1-(maxu_1u_2)^-(1+theta)(1-theta)  right \n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the Independent Copula\nWhen Œ∏ = 1, it is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nJoe, Harry, Multivariate Models and Multivariate Dependence Concepts, Chapman & Hall. 1997.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#B11Copula","page":"Other Copulas","title":"B11Copula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"B11Copula","category":"page"},{"location":"Others.html#TwinCopulas.B11Copula","page":"Other Copulas","title":"TwinCopulas.B11Copula","text":"B11Copula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nB11Copula(Œ∏)\n\nThe bivariate B11 copula is parameterized by theta in 01. It is constructed as: \n\nC(u_1 u_2) = theta minu_1u_2 + (1-theta)u_1u_2\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the IndependentCopula\nWhen Œ∏ = 1, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\n[Joe1997] Joe, Harry, Multivariate Models and Multivariate Dependence Concepts, Chapman & Hall. 1997.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#FrechetCopula","page":"Other Copulas","title":"FrechetCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"FrechetCopula","category":"page"},{"location":"Others.html#TwinCopulas.FrechetCopula","page":"Other Copulas","title":"TwinCopulas.FrechetCopula","text":"FrechetCopula{P}\n\nFields:\n\n- Œ∏1::Real - parameter\n- Œ∏2::Real - parameter\n\nConstructor\n\nFrechetCopula(Œ∏1, Œ∏2)\n\nThe bivariate Fr√©chet copula is parameterized by theta_i in 01 i = 12, such that theta_1 + theta_2 leq 1 . It is constructed as: \n\nC(u_1 u_2) = theta_1 minu_1 u_2 + (1- theta_1 - theta_2)u_1u_2 + theta_2 maxu_1 + u_2 - 1 0\n\nIt has a few special cases: \n\nWhen Œ∏1 = Œ∏2 = 0, it is the Independent Copula\nWhen Œ∏1 = 1, it is the MCopula (Upper Frechet-Hoeffding bound) \nWhen Œ∏2 = 1, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#IndependentCopula","page":"Other Copulas","title":"IndependentCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"IndependentCopula","category":"page"},{"location":"Others.html#TwinCopulas.IndependentCopula","page":"Other Copulas","title":"TwinCopulas.IndependentCopula","text":"IndependentCopula\n\nConstructor\n\nIndependentCopula()\n\nThe bivariate Independent Copula is the simplest copula, that has the form : \n\nC(u_1u_2) = u_1u_2\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#MardiaCopula","page":"Other Copulas","title":"MardiaCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"MardiaCopula","category":"page"},{"location":"Others.html#TwinCopulas.MardiaCopula","page":"Other Copulas","title":"TwinCopulas.MardiaCopula","text":"MardiaCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nMardiaCopula(Œ∏)\n\nThe bivariate Mardia copula is parameterized by theta in -11. It is constructed as: \n\nC(u_1 u_2) = fractheta^2(1+theta)2minu_1u_2 + (1-theta^2)u_1u_2 + fractheta^2(1-theta)2maxu_1+u_2-10\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the Independent Copula\nWhen Œ∏ = 1, it is the MCopula (Upper Frechet-Hoeffding bound) \nWhen Œ∏ = -1, is is the WCopula (Lower Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#MaresiasCopula","page":"Other Copulas","title":"MaresiasCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"MaresiasCopula","category":"page"},{"location":"Others.html#TwinCopulas.MaresiasCopula","page":"Other Copulas","title":"TwinCopulas.MaresiasCopula","text":"MaresiasCopula{P}\n\nFields:\n\n- G::Function\n\nConstructor\n\nMaresiasCopula(G)\n\nThe bivariate Maresias copula is parameterized by functions G H 01 to 01, such that G(u) = 2u - H(u) u in 01. It is constructed as: \n\nC(u_1 u_2) = frac12left ( G(u_1)G(u_2) + H(u_1)H(u_2) right )\n\nReferences:\n\nSimulating copulas: stochastic models, sampling algorithms, and applications. 2017.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#ArchimaxCopula","page":"Other Copulas","title":"ArchimaxCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"ArchimaxCopula","category":"page"},{"location":"Others.html#TwinCopulas.ArchimaxCopula","page":"Other Copulas","title":"TwinCopulas.ArchimaxCopula","text":"ArchimaxCopula{A, E}\n\nFields:\n\n-Archimedean::A - Archimedean Copula\n-Extreme::E - Extreme Value Copula\n\nConstructor\n\nArchimaxCopula(Archimedean, Extreme)\n\nThe bivariate Archimax Copula is parameterized by an Archimedean Copula and Extreme Value Copula. It is constructed as follows: \n\nC_ell varphi(u_1 u_2) = varphi(ell(varphi^-1(u_1)varphi^-1(u_2)))\n\nwhere varphi is the generator of the Archimedean Copula and varphi^-1 is the inverse and ell is the stable tail dependece function of Extreme value Copula\n\nFor more details see\n\nReferences:\n\nCharpentier et al, Multivariate Archimax Copulas, Journal of Multivariate analysis. 2014. \n\n\n\n\n\n","category":"type"},{"location":"Others.html#EmpiricalCopula","page":"Other Copulas","title":"EmpiricalCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"EmpiricalCopula","category":"page"},{"location":"Others.html#TwinCopulas.EmpiricalCopula","page":"Other Copulas","title":"TwinCopulas.EmpiricalCopula","text":"EmpiricalCopula{M}\n\nFields:\n\n-data::M - 2xn matrix observations\n\nConstructor\n\nEmpiricalCopula(data)\n\nLet (x_k y_k) k = 12 ldots n denote a sample of size n from continuous bivariate distribution. The Empirical Copula is the function\n\nC_n(fracinfracjn) = fractextnumber of pairs (xy) in the sample with x leq x_(i) y leq y_(j)n\n\nFor more details see\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#PlackettCopula","page":"Other Copulas","title":"PlackettCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"PlackettCopula","category":"page"},{"location":"Others.html#TwinCopulas.PlackettCopula","page":"Other Copulas","title":"TwinCopulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - Œ∏::Real - parameter\n\nConstructor\n\nPlackettCopula(Œ∏)\n\nThe bivariate Plackett Copula parameterized by theta  0 The Plackett. It is constructed as:  \n\nC(u_1u_2) = frac12eta^-1(1+eta(u_1+u_2)-((1+eta(u_1+u_2))^2 - 4theta eta u_1 u_2)^12) \n\nwhere eta)=theta-1\n\nIt has a few special cases: \n\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = 0, is is the WCopula (Lower Frechet-Hoeffding bound) \n\nReferences:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\nJohnson, Mark E. Multivariate statistical simulation: A guide to selecting and generating continuous multivariate distributions. Vol. 192. John Wiley & Sons, 1987. Page 193.\nNelsen, Roger B. An introduction to copulas. Springer, 2006. Exercise 3.38.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#SurvivalCopula","page":"Other Copulas","title":"SurvivalCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"SurvivalCopula","category":"page"},{"location":"Others.html#TwinCopulas.SurvivalCopula","page":"Other Copulas","title":"TwinCopulas.SurvivalCopula","text":"SurvivalCopula{P}\n\nFields:\n\n- C::bicopula\n\nConstructor\n\nSurvivalCopula(C)\n\nThe bivariate Survival copula is defined as\n\noverbarC(u_1u_2) = C(u_1 u_2) + u_1 + u_2 - 1\n\nWhere C(u_1 u_2) is a copula as we know them.\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#MCopula","page":"Other Copulas","title":"MCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"MCopula","category":"page"},{"location":"Others.html#TwinCopulas.MCopula","page":"Other Copulas","title":"TwinCopulas.MCopula","text":"MCopula\n\nConstructor\n\nMCopula()\n\nThe Upper Frechet-Hoeffding bound is defined as\n\nM(u_1u_2) = minu_1u_2\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Others.html#MorgensternCopula","page":"Other Copulas","title":"MorgensternCopula","text":"","category":"section"},{"location":"Others.html","page":"Other Copulas","title":"Other Copulas","text":"MorgensternCopula","category":"page"},{"location":"Others.html#TwinCopulas.MorgensternCopula","page":"Other Copulas","title":"TwinCopulas.MorgensternCopula","text":"MorgensternCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nMorgensternCopula(Œ∏)\n\nThe bivariate Morgenstern copula or FGM Copula is parameterized by theta in -11. It is constructed as: \n\nC(u_1 u_2) = u_1u_2(1+theta(1-u_1)(1-u_2))\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the Independent Copula\n\nReferences:\n\nJoe, Harry, Multivariate Models and Multivariate Dependence Concepts, Chapman & Hall. 1997.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Archimedean_theory.html#Archimedean_theory","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Archimedean copulas are one of the most popular families within this field due to two fundamental characteristics: they have a closed and straightforward algebraic expression, and they exhibit a high level of symmetry. A copula C_varphi, is an Archimedean copula if it has the functional form C_varphi(u_1 u_2) = varphi(varphi^-1(u_1) + varphi^-1(u_2)) where varphi is a continuous, strictly non-increasing function varphi 0 infty) to 0 1 with varphi(0)=1 and lim_x to inftyvarphi(x)=0 called the Archimedean generator.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In the context of bivariate Archimedean copulas, the generator varphi must also be completely monotone to ensure that C_varphi is a valid copula. A function varphi is said to be completely monotone if it satisfies (-1)^k varphi^(k)(x) ge 0 for all x ge 0 and for all k ge 0. This property guarantees that the corresponding copula exhibits appropriate dependency structures. To construct such generators, we can use the Williamson transform, which provides a method to generate completely monotone functions suitable for Archimedean copulas.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (d-monotony [mcneil2009]): A function varphi is said to be d-monotone if it has d-2 derivatives which satisfy (-1)^k varphi^(k)(x) ge 0 forall k in 0 1 ldots d-2and if (-1)^d-2varphi^(d-2)(x) is a non-increasing and convex function. A function that is d-monotone for all d is called completely monotone.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In the particular case when (d = 2), a function varphi is 2-monotone if it satisfies:","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"varphi(x) ge 0\nvarphi(x) le 0\n(i.e., varphi is non-increasing)\nvarphi(x) ge 0\n(i.e., varphi is non-decreasing and convex)","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Therefore, a function that is 2-monotone is a non-increasing, convex function.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"To summarize, a function varphi that is 2-monotone must be non-increasing and convex. If varphi is d-monotone for all d, it is called completely monotone.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In this package, there is an abstract type [ArchimedeanCopula] that provides a foundation for defining Archimedean copulas. Many Archimedean copulas are already implemented for you! See [the list of implemented Archimedean copulas] to get an overview.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"If you do not find the one you need, you may define it yourself by subtyping ArchimedeanCopula. The API does not require much information, which is really convenient. Only the following methods are required:","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ùòô(C::ArchimedeanCopula) =\nœï(C::ArchimedeanCopula, x) = \nœï‚Åª¬π(C::ArchimedeanCopula, x) =","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"That is, the Archimedean generator, its inverse, and its respective radial function. With the above, you can define a new copula in this package as follows: ","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"struct MyArchimedeanCopula{P} <: ArchimedeanCopula{P}\n    Œ∏::P\nend\n\nùòô(C::MyArchimedeanCopula) = 1\nœï(C::MyArchimedeanCopula, x) = exp(-x)\nœï‚Åª¬π(C::MyArchimedeanCopula, x) = -log(x)","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"It is not difficult to see that in this case C_varphi = prod showing that the independence copula prod is included in the Archimedean Family.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"info: Nomenclature information\nWe have called ùòô() the radial distribution, which is necessary for sampling a bivariate Archimedean copula. The letter we use is \\isansR. In this document, we use varphi, but in code, we use \\phi.","category":"page"},{"location":"Archimedean/Archimedean_theory.html#Advanced-Concepts","page":"Archimedean Copulas","title":"Advanced Concepts","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Here, we present some important concepts of the theory of Archimedean copulas.","category":"page"},{"location":"Archimedean/Archimedean_theory.html#Radial-Distribution","page":"Archimedean Copulas","title":"Radial Distribution","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"The radial distribution, denoted as ùòô(cdot), is essential for generating samples from a bivariate Archimedean copula. It represents the distribution of the radial part of the copula and can be used to obtain the dependent structure between the two variables. The radial distribution is a key component in the sampling process and is used to generate the joint distribution from the marginal distributions.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"For the class of Archimedean copulas, we propose three different algorithms to generate samples from a copula.","category":"page"},{"location":"Archimedean/Archimedean_theory.html#Conditional-Sampling-for-Bivariate-Archimedean-Copulas","page":"Archimedean Copulas","title":"Conditional Sampling for Bivariate Archimedean Copulas","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"To use this sampling method, we define the radial distribution as 1. This is represented in Julia as:","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ùòô(C::ArchimedeanCopula) = 1","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"When this is defined, TwinCopulas uses Algorithm 1, introduced in [reference], to sample from the copula and its derivative as follows. We adapt Algorithm 1 from [reference] for the case of bivariate Archimedean copulas. The input for the algorithm is a bivariate archimedean copula C 01^2 to 01","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Algotithm 1: Bivariate Archimedean Copulas(1) Simulate U_2 sim mathcalU01(2) Compute (the right continuous version of) the function F_U_1U_2(u_1)=fracpartialpartial u_2C(u_1u_2)=varphi(varphi^-1(u_1)+varphi^-1(u_2))varphi^-1(u_2) quad u_2 in 01 (3) Compute de generalized inverse of F_U_1U_2 i.e F^-1_U_1U_2(v)=infu_1  0 F_U_1U_2(u_1)geq v quad v in 01  (4) Simulate V sim mathcalU01 independent of U_2(5) Set U_1 = F^-1_U_1U_2(V) and return (U_1 U_2)","category":"page"},{"location":"Archimedean/Archimedean_theory.html#Sampling-from-Archimedean-Copula-Using-Frailty-Distribution","page":"Archimedean Copulas","title":"Sampling from Archimedean Copula Using Frailty Distribution","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html#Algorithm","page":"Archimedean Copulas","title":"Algorithm","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Here is a detailed algorithm for sampling from an Archimedean copula using the frailty distribution:","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Algorithm 2: Sampling from Archimedean Copula Using Frailty Distribution(1) Sample a positive random variable W with Laplace transform (Know Radial Distribution) varphi(2) Sample a random variable Z sim Erlang(2 1) and compute R=fracZW (3) Sample i.i.d E_1 E_2 where E_k sim Exp(1) and compute S_k=fracE_kE_1+E_2   k = 12 (4) Return (U_1 U_2) where U_k=varphi(RS_k)   k=12","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"By using the frailty distribution approach, the algorithm ensures accurate and efficient sampling from the Archimedean copula, maintaining the desired dependence structure. For the copulas such that AMH, Clayton, Frank, Gumbel and Joe the literature shows its corresponding radial distribution.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ùòô(C::GumbelCopula) = Stable(1 / C.Œ∏)","category":"page"},{"location":"Archimedean/Archimedean_theory.html#Sampling-from-Archimedean-Copula-Using-Williamson-Transform","page":"Archimedean Copulas","title":"Sampling from Archimedean Copula Using Williamson Transform","text":"","category":"section"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"In many cases the radial distribution is not kwon, in this case [Mcneil] solves this problem using the concept of d-monote generator together with the Williamson Transform.","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Definition (Williamson 2-Transform [mcneil2009]): The Williamson 2-Transform of a positive random variable R is defined as frakW_2F(R) = mathbbEmax(1-fracrR0)   r geq 0","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Furthermore, the distribution function F_R of a postive random variable R is completely characterized by Williamson transform of varphi archimedean generator by frakW_2^-1varphi That is F_R(r)=1-varphi(r)+rvarphi(r)","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"This is sufficient to obtain the radial distribution necessary to obtain samples of a bivariate archimedean copula. This is very beneficial if you do not kwon the specific radial distribution for a bivariate archimedean copula. Follow the algorithm for this case:","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Algorithm 3: Sampling from Archimedean Copula Using the Williamson 2-Transform(1) Sample a positive random variable Rsim F(R) where F(R)=frakW_2^-1varphi.$(2) Sample i.i.d E_1 E_2 where E_k sim Exp(1) and compute S_k=fracE_kE_1+E_2   k = 12 (3) Return (U_1 U_2) where U_k=varphi(RS_k)   k=12","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ùòô(C::MyArchimedeanCopula) = RadialDist(C.Œ∏)","category":"page"},{"location":"Archimedean/Archimedean_theory.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"We tested this implementation using Nelsen2Copula from TwinCopulas, this corresponds to copula number 2 from table 4.1 of Nelsen (2006). It works well for certain values of the parameter, for other cases there are numerical problems when obtaining the inverse distribution. We need more test to be able to generalize this function. For more details you can see [Nelsen]. ","category":"page"},{"location":"Copula_Sklar.html#Copulas","page":"Getting starting","title":"Copulas","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The law of 2-dimensional random vector X = (X_1 X_2) defined on a probability space (Omega mathcalF mathbbP) is usually studied from its distribution function","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"F(x_1x_2)= mathbbP(X_1 leq x_2 X_2 leq x_2) hspace05cm x_1 x_2 in mathbbR","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"For i = 12 the distribution function F_i of X_i is called the (univariate) marginal law or margin and be retrieved from F via","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"F_i(x_i) = mathbbP(X_i leq x_i)=F(x_iinfty) hspace05cm x_i in mathbbR","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"It is important to note that knowing the marginal distributions F_1 F_2 is not sufficient to determine the joint distribution F Additionally, it is required to understand how the marginal distributions are coupled. This is achieved by means of a copula of (X_1 X_2) Generally speaking, knowing the margins and a copula is equivalent to knowing the joint distribution. It is now appropriate to provide the definition of a copula.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Definition (Copula):  (1) A function C 0 1^2 to 0 1 is called a bivariate copula, if there is a probability space (Omega mathcalF mathbbP) supporting a random vector (U_1 U_2) such that U_k sim mathcalU01 for all k=12 and $ C(u1,u2)=\\mathbb{P}(U1 \\leq u1, U2 \\leq u2), \\hspace{0.5 cm} u1, u2 \\in [0, 1].$","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"(2) On a probability space (Omega mathcalF mathbbP) let (U_1 U_2) be a random vector on 01^2 whose joint distribution function is a copula C 01^2 to 01","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"using Distributions, TwinCopulas\nŒ∏ = 0.5 # Parameter\nG = GaussianCopula(Œ∏) # A 2-dimensional Gaussian Copula with parameter Œ∏ = 0.5.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"This object is a random vector, and behaves exactly as you would expect a random vector from Distributions.jl to behave: you may sample it with rand(C,100), compute its pdf or cdf with pdf(C,x) and cdf(C,x), etc:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"u = rand(G, 10)","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"v = [0.5, 0.6]\ncdf(G, v)","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Example (Independent Copula)  The function Pi 01^2 to 01 given by Pi(u_1 u_2)=u_1u_2 hspace05 cm u_1u_2 in 01 is called the Independence Copula.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Example (Fr√©chet-Hoeffding bounds)The Fr√©chet-Hoeffding bounds represent the extreme cases of dependence for a copula. These bounds are given by the following functions:Lower Fr√©chet-Hoeffding bound:$","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"W(u1, u2) = \\max{u1 + u2 - 1, 0}$","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Upper Fr√©chet-Hoeffding bound:M(u_1 u_2) = minu_1 u_2","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"These limits can be viewed as the extreme cases of dependence in a copula:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The lower bound W(u_1 u_2) corresponds to the case of the most negative dependence, where the variables are perfectly anti-monotonic. This means that if one variable increases, the other decreases in a perfectly predictable manner.\nThe upper bound M(u_1 u_2) corresponds to the case of the most positive dependence, where the variables are perfectly monotonic. This means that if one variable increases, the other also increases in a perfectly predictable manner.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"These bounds provide a way to understand the range of possible dependence structures that can be modeled by a copula, from complete negative dependence to complete positive dependence.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The syntax to use these copulas in TwinCopulas is the following:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"using TwinCopulas\nI = IndependentCopula() # A 2-dimensional Independent Copula.\nM = MCopula() # A 2-dimensional upper bound.\nW = WCopula() # A 2-dimensional lower bound.","category":"page"},{"location":"Copula_Sklar.html#Sklar's-Theorem","page":"Getting starting","title":"Sklar's Theorem","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"In probability theory and statistics, Sklar's Theorem is a fundamental result that connects multivariate distribution functions to their marginal distributions through a copula. This theorem provides a powerful framework for modeling and analyzing the dependence structure between random variables.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Sklar's Theorem: Let F a 2-dimensional distribution function with margins F_1F_2. Then there exist a 2-dimensional copula C such that for all (x_1x_2) in mathbbR^2 it holds that  F(x_1 x_2)=C(F_1(x_1)F_2(x_2))   If F_1 F_2 are continuous, then C is unique. Conversely, if C is a 2-dimensional copula and F_1 F_2 are univariate distribution functions, then he function F is a 2-dimensional distribution function [sklar1959].","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Sklar's Theorem is significant because it allows us to separate the marginal behavior of each variable from their dependence structure. The marginal distributions F_1 and F_2 describe the individual behavior of the random variables, while the copula C captures how these variables are related to each other.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"This separation is particularly useful in various applications:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Modeling Flexibility: By using copulas, we can model complex dependencies between variables while maintaining flexibility in choosing different marginal distributions. This is especially valuable in fields like finance, insurance, and risk management, where understanding dependencies between risks is crucial.\nDependence Structure: Copulas provide a way to quantify and visualize the dependence structure between variables, which is not possible by looking at marginals alone. This helps in understanding the nature and strength of the relationships between variables.\nSimulation and Sampling: Sklar's Theorem facilitates the generation of multivariate data with specified marginals and dependence structures. This is useful for simulations and scenarios where realistic modeling of dependencies is required.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"In summary, Sklar's Theorem is a cornerstone in the field of copula theory, enabling the decoupling of marginal distributions and dependence structures, and providing a versatile tool for statistical modeling and analysis of multivariate data.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The syntax for generating bivariate distributions with Sklar's theorem is as follows:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"using TwinCopulas, Distributions\nmargins = [Normal(), Beta(3.5, 2.3)]\ncopula = ClaytonCopula(3.5)\nF = SklarDist(copula, margins)","category":"page"},{"location":"Copula_Sklar.html#Survival-Copulas","page":"Getting starting","title":"Survival Copulas","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"In some cases, it is more convenient to describe the distribution of a random vector (X_1 X_2) using its survival function instead of its distribution function, especially when the components X_1 and X_2 are interpreted as lifetimes. The survival function provides a more intuitive description in such contexts.","category":"page"},{"location":"Copula_Sklar.html#Definition-of-the-Bivariate-Survival-Function","page":"Getting starting","title":"Definition of the Bivariate Survival Function","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"For a bivariate random vector (X_1 X_2) defined on a probability space (Omega mathcalF mathbbP), the survival function overlineF is defined as:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"overlineF(x_1 x_2) = mathbbP(X_1  x_1 X_2  x_2) quad x_1 x_2 in mathbbR","category":"page"},{"location":"Copula_Sklar.html#Marginal-Survival-Functions","page":"Getting starting","title":"Marginal Survival Functions","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"For i = 1 2, the univariate marginal survival function overlineF_i of X_i can be retrieved from the bivariate survival function overlineF as follows:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"overlineF_i(x_i) = mathbbP(X_i  x_i) = overlineF(x_i -infty) quad textfor  i = 1  textand  overlineF_i(x_i) = overlineF(-infty x_i) quad textfor  i = 2 quad x_i in mathbbR","category":"page"},{"location":"Copula_Sklar.html#Relationship-to-Sklar's-Theorem","page":"Getting starting","title":"Relationship to Sklar's Theorem","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Analogous to Sklar's Theorem for distribution functions, the survival function of a bivariate random vector can be decomposed into a copula and its marginal survival functions. This decomposition allows for a more nuanced understanding of the dependence structure between the variables.","category":"page"},{"location":"Copula_Sklar.html#Survival-Analog-of-Sklar's-Theorem","page":"Getting starting","title":"Survival Analog of Sklar's Theorem","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Let overlineF be a bivariate survival function with marginal survival functions overlineF_1 and overlineF_2. Then there exists a bivariate copula overlineC such that for all (x_1 x_2) in mathbbR^2, the following holds:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"overlineF(x_1 x_2) = overlineC(overlineF_1(x_1) overlineF_2(x_2))","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"If the marginal survival functions overlineF_1 and overlineF_2 are continuous, then the copula overlineC is unique. Conversely, if overlineC is a bivariate copula and overlineF_1 and overlineF_2 are univariate survival functions, then the function overlineF is a bivariate survival function.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The survival copula approach is particularly useful in reliability theory and survival analysis, where it is common to deal with the lifetimes of components or systems. The survival function provides a direct way to model the joint survival probabilities, and the survival copula captures the dependence structure between these lifetimes. This method allows for a clearer interpretation and more effective modeling of the joint behavior of the variables involved.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"By utilizing survival copulas, one can effectively separate the marginal survival characteristics of each variable from their dependence structure, leading to a more flexible and comprehensive approach to multivariate survival analysis.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The syntax to use the survival copula in TwinCopulas is the following:","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"using TwinCopulas\ncop = GumbelCopula(5.5)\nS = SurvivalCopula(cop)","category":"page"},{"location":"Copula_Sklar.html#Conditional-Sampling-for-Bivariate-Copulas","page":"Getting starting","title":"Conditional Sampling for Bivariate Copulas","text":"","category":"section"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"As the main sampling method, TwinCopulas implements conditional sampling based on a bivariate probability space, supporting two iid random variables. This algorithm is not restricted to any specific class of copulas, making it versatile for sampling arbitrary bivariate copulas. The only challenging step is calculating the partial derivative and its generalized inverse, which usually requires a well-defined analytical form of the copula and is not easy to obtain.","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"The imput for the algorithm is a bivariate copula C 01^2 to 01","category":"page"},{"location":"Copula_Sklar.html","page":"Getting starting","title":"Getting starting","text":"Algotithm 1(1) Simulate U_2 sim mathcalU01(2) Compute (the right continuous version of) the function F_U_1U_2(u_1)=fracpartialpartial u_2C(u_1u_2)_u_2=U_2 quad u_2 in 01 (3) Compute de generalized inverse of F_U_1U_2 i.e F^-1_U_1U_2(v)=infu_1  0 F_U_1U_2(u_1)geq v quad v in 01  (4) Simulate V sim mathcalU01 independent of U_2(5) Set U_1 = F^-1_U_1U_2(V) and return (U_1 U_2)","category":"page"},{"location":"Elliptical/Elliptical_theory.html#Elliptical_theory","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"","category":"section"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"An Elliptical Copula is defined as the copula of the related elliptical distribution F. Its analytical form is obtained via Sklar's theorem from the distribution function F. A copula C is an Elliptical Copula if it has the functional form C(u_1 u_2) = F(F_1^-1(u_1) F_2^-1(u_2)) quad u_1 u_2 in 0 1^2 where F_k^-1 are the univariate quantile functions, k=12.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Elliptical copulas are widely used and well-documented in the literature due to their unique characteristics, such as their ability to model symmetric dependencies and their flexibility in capturing various dependency structures. Unlike extreme value copulas and Archimedean copulas, elliptical copulas do not have a closed-form expression, making them distinct in their formulation and application.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Two well-known examples of elliptical copulas are the Gaussian copula and the t copula. These copulas are particularly important due to their widespread use in finance and risk management:","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Bivariate Gaussian Copula: The bivariate normal or Gaussian copula C_gaussian is the copula of (X Y) sim mathcalN_2(0 P) where P is a correlation matrix. The functional form is obtained by C_Gaussian(u_1u_2)=Phi_2(Phi^-1(u_1)Phi^-1(u_2)) quad u_1u_2 in 01^2 where Phi_2 is the joint distribution function of (XY) and Phi^-1 is the quantile function of the univariate standard normal distribution.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Bivariate t Copula: The bivariate t-Copula C_tnu is the copula of (XY)sim t_2(0Pnu) where P is a correlation matrix. The analytical form is obtained by C_tnu(u_1u_2)=t_2nu(t_nu^-1(u_1)t_nu^-1(u_2)) quad u_1u_2 in 01^2 where t_2nu is the joint distribution function of (XY) and t_nu^-1 is the quantile function of the univariate standar t-distribution with nu degrees of freedom.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Elliptical copulas, including the Gaussian and t copulas, are powerful tools for modeling dependencies between variables, particularly when the dependency structure is symmetric and not overly influenced by tail behavior.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"In this package, there is an abstract type [EllipticalCopula] that provides a foundation for defining elliptical copulas. The Gaussian and t copulas are already implemented for you! You can utils these as follow","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"julia> G = GaussianCopula(0.8)\nGaussianCopula{Float64}(Œ∏=0.8) #Gaussian Copula with param 0.8\n\njulia> T = tCopula(2, -0.3)\ntCopula{Int64, Float64}(Œ∏=-0.3, ŒΩ=2) #t Copula with 2 degree of freedom and param -0.3","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"You may want to use an elliptical copula customized for your needs. TwinCopulas allows the implementation of your own elliptic copula. You can implement it in the following way","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"struct MyEllipticalCopula{P} <: EllipticalCopula{P}\n    Œ∏::P #param o params need for created a correlation matrix\nend","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"In this way you create a structure of your copula and you can implement the CDF, PDF or whatever functions you want following the conventions used in this package","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"function Distributions.cdf(C::MyEllipticalCopula, x::AbstractVector)\n    cdf_value = #Implement the specific cdf of your copula\n    return cdf_value\nend\n\nfunction Distributions.pdf(C::MyElliptical, x::AbstractVector)\n    pdf_value = #Implement the specific pdf of your copula\n    return pdf_value\nend","category":"page"},{"location":"Elliptical/Elliptical_theory.html#Sampling-for-Bivariate-Elliptical-Copulas","page":"Elliptical Copulas","title":"Sampling for Bivariate Elliptical Copulas","text":"","category":"section"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"In the same way as in other classes of domes, to generate samples of a Gaussian copula we can use the conditional method, you only need the first derivative of the copula function, however in many cases this can be complex. You could use ForwardDiff for an approximation.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"In TwinCopulas we use specific methods for each elliptical copula. Below we detail these algorithms.","category":"page"},{"location":"Elliptical/Elliptical_theory.html#Simulating-the-Gaussian-Copula","page":"Elliptical Copulas","title":"Simulating the Gaussian Copula","text":"","category":"section"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Imput the bivariate Gaussian Copula with param theta.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"(1) We form the correlation matrix \\Sigma = \\begin{pmatrix}","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"1.0 & \\theta\\  \\theta & 1.0 \\end{pmatrix}$ for the bivariate case.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"(2) Compute the Cholesky descomposition of Sigma providing a lower triangular matrix A satisfying AA=Sigma(3) Simulate Y_1 Y_2 sim mathcalN(01)(4) Compute the random vector $\\begin{pmatrix}","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"X1\\  X2 \\end{pmatrix}=A\\cdot \\begin{pmatrix} Y1\\  Y2 \\end{pmatrix}$","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"which has bivariate normal distribution with zero mean vector, unit variances, and correlation matrix Sigma(5) Return (U_1 U_2) where U_i=Phi(X_i) i=12 where  Phi is the CDF of standard normal distribution.","category":"page"},{"location":"Elliptical/Elliptical_theory.html#Simulating-the-Gaussian-Copula-2","page":"Elliptical Copulas","title":"Simulating the Gaussian Copula","text":"","category":"section"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Imput the bivariate t-Copula with params (nutheta).","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"(1) We form the correlation matrix \\Sigma = \\begin{pmatrix}","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"1.0 & \\theta\\  \\theta & 1.0 \\end{pmatrix}$ for the bivariate case.","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"(2) Compute the Cholesky descomposition of Sigma providing a lower triangular matrix A satisfying AA=Sigma(3) Simulate Y_1 Y_2 sim mathcalN(01) and simulate a rando variable Wsim invGamma(fracnu2 fracnu2)(4) Compute the random vector $\\begin{pmatrix}","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"X1\\  X2 \\end{pmatrix}=\\sqrt{W}A\\cdot \\begin{pmatrix} Y1\\  Y2 \\end{pmatrix}$","category":"page"},{"location":"Elliptical/Elliptical_theory.html","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"(5) Return (U_1 U_2) where U_i=t_nu(X_i) i=12 where  t_nu is the CDF of standard t-distribution.","category":"page"},{"location":"starting.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"starting.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"The TwinCopulas package is available through the Julia package system by running Pkg.add(\"TwinCopulas\"). Throughout, we assume that you have installed the package.","category":"page"},{"location":"starting.html#Starting-With-a-Bivariate-Gaussian-Copula","page":"Getting Started","title":"Starting With a Bivariate Gaussian Copula","text":"","category":"section"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"We start by drawing 1000 observations from a Gaussian Copula random variable.","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"The first step is to set up the environment:","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> using Random, Distributions, TwinCopulas\n\njulia> Random.seed!(123) # Setting the seed","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"Then, we create a bivariate Gaussian Copula distribution G and obtain samples using rand:","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> G = GaussianCopula(0.5)\nGaussianCopula{Float64}(Œ∏=0.5)","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"The object G represents a probability distribution, in our case the bivariate Gaussian Copula. One can query its properties such as the Kendall's tau (tau, we need de letter \\tau) :","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> TwinCopulas.œÑ(G)\n0.33333333333333337","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"We can also draw samples from G with rand.","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> x = rand(G,1000)\n2√ó1000 Matrix{Float64}:\n 0.842684  0.151638  0.488056  0.0362257  0.474858  ‚Ä¶  0.525896  0.640167  0.965114  0.0298152  0.632266\n 0.195875  0.189835  0.777506  0.0273238  0.425615     0.41442   0.467543  0.533448  0.750643   0.359143","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"You can easily obtain the pdf, cdf, and many other functions for a distribution. For instance, the rho_s (Spearman's Rho), lambda_u lambda_l (Upper and lower tail dependence), beta (Blomqvist beta) and gamma (Ginni's coefficient):","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> cdf(G, [0.5,0.6])\n0.3804363762931904\n\njulia> pdf(G, [0.5,0.6])\n1.1424140110638463","category":"page"},{"location":"starting.html#Note:","page":"Getting Started","title":"Note:","text":"","category":"section"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"Functions such as Œ≤ (Blomqvist's beta), œÑ (Kendall's tau), œÅ_s (Spearman's Rho), and tail dependence measures (Œª_u, Œª_l) must be prefixed with TwinCopulas because they are not directly exported by the module. For example, use TwinCopulas.Œ≤(copula) to access Blomqvist's beta.","category":"page"},{"location":"starting.html#Using-Other-Copulas","page":"Getting Started","title":"Using Other Copulas","text":"","category":"section"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"The package contains a large number of additional Copulas of two main types:","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"bicopula == ArrayLikeVariate{1}\nSklarDist == ArrayLikeVariate{1}","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"Each type splits further into bivariate Continuous.","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"For instance, you can define the following Copulas (among many others):","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> T = tCopula(ŒΩ, œÅ) # bicopula (Elliptical)\njulia> A = ClaytonCopula(Œ∏)  # bicopula (Archimedean)\njulia> E = GalambosCopula(Œ∏) # bicopula (Extreme Value)\njulia> R = ArchimaxCopula(A, E) # bicopula (Archimax)","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"In addition, you can create Copulas from univariate distributions (univariate margins):","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> SklarDist(GaussianCopula(Œ∏), [Normal(mu, sigma), Beta(Œ±, Œ≤)])","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"To find out which parameters are appropriate for a given Copula C, you can use fieldnames(D):","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"julia> fieldnames(tCopula)\n(:Œ∏, :ŒΩ)\njulia> fieldnames(ArchimaxCopula)\n(:Archimedean, :Extreme)\njulia> fieldnames(SklarDist)\n(:copula, :margins)","category":"page"},{"location":"starting.html","page":"Getting Started","title":"Getting Started","text":"This tells you that a t Copula is initialized with dregree of freddom ŒΩ and  Œ∏, ArchimaxCopula with an Archimedean Copula and Extreme value Copula, SklarDist need a bivariate copula (bicopula) and univariate distributions margins.","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#Archimedean_models","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html#AMHCopula","page":"Archimedean Copulas","title":"AMHCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"AMHCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.AMHCopula","page":"Archimedean Copulas","title":"TwinCopulas.AMHCopula","text":"AMHCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nAMHCopula(Œ∏)\n\nThe bivariate AMH copula is parameterized by theta in -11). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the IndependentCopula\nWhen Œ∏ = 1, it is the UtilCopula \n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#ClaytonCopula","page":"Archimedean Copulas","title":"ClaytonCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ClaytonCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.ClaytonCopula","page":"Archimedean Copulas","title":"TwinCopulas.ClaytonCopula","text":"ClaytonCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nClaytonCopula(d,Œ∏)\n\nThe bivariate Clayton copula is parameterized by theta in -1infty). It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\nIt has a few special cases: \n\nWhen Œ∏ = -1, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen Œ∏ = 0, it is the IndependentCopula\nWhen Œ∏ = 1, it is the UtilCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#FrankCopula","page":"Archimedean Copulas","title":"FrankCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"FrankCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.FrankCopula","page":"Archimedean Copulas","title":"TwinCopulas.FrankCopula","text":"FrankCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nFrankCopula(Œ∏)\n\nThe bivariate Frank copula is parameterized by theta in (-inftyinfty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\nIt has a few special cases: \n\nWhen Œ∏ = -‚àû, it is the WCopula (Lower Frechet-Hoeffding bound)\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#GumbelBarnettCopula","page":"Archimedean Copulas","title":"GumbelBarnettCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"GumbelBarnettCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.GumbelBarnettCopula","page":"Archimedean Copulas","title":"TwinCopulas.GumbelBarnettCopula","text":"GumbelBarnettCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nGumbelBarnettCopula(Œ∏)\n\nThe bivariate Gumbel-Barnett copula is parameterized by theta in (01. It is an Archimedean copula with generator :\n\nphi(t) = expŒ∏^-1(1-e^t) 0 leq theta leq 1\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the IndependentCopula\n\nReferences:\n\nJoe, H. (2014). Dependence modeling with copulas. CRC press, Page.437\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#GumbelCopula","page":"Archimedean Copulas","title":"GumbelCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"GumbelCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.GumbelCopula","page":"Archimedean Copulas","title":"TwinCopulas.GumbelCopula","text":"GumbelCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nGumbelCopula(d,Œ∏)\n\nThe bivariate Gumbel copula is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1Œ∏\n\nIt has a few special cases: \n\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#InvGaussianCopula","page":"Archimedean Copulas","title":"InvGaussianCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"InvGaussianCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.InvGaussianCopula","page":"Archimedean Copulas","title":"TwinCopulas.InvGaussianCopula","text":"InvGaussianCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nInvGaussianCopula(Œ∏)\n\nThe bivariate Inverse Gaussian copula is parameterized by theta in 0infty). It is an Archimedean copula with generator :\n\nphi(t) = expfrac1-sqrt1+2Œ∏^2tŒ∏\n\nMore details about Inverse Gaussian Archimedean copula are found in :\n\nMai, Jan-Frederik, and Matthias Scherer. Simulating copulas: stochastic models, sampling algorithms, and applications. Vol. 6. # N/A, 2017. Page 74.\n\nIt has a few special cases:\n\nWhen Œ∏ = 0, it is the IndependentCopula\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#JoeCopula","page":"Archimedean Copulas","title":"JoeCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"JoeCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.JoeCopula","page":"Archimedean Copulas","title":"TwinCopulas.JoeCopula","text":"JoeCopula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nJoeCopula(Œ∏)\n\nThe bivariate Joe copula is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\nIt has a few special cases: \n\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#Nelsen2Copula","page":"Archimedean Copulas","title":"Nelsen2Copula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Nelsen2Copula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.Nelsen2Copula","page":"Archimedean Copulas","title":"TwinCopulas.Nelsen2Copula","text":"Nelsen2Copula{P}\n\nFields:\n\nŒ∏::Real - parameter\n\nConstructor\n\nNelsen2Copula(Œ∏)\n\nThe bivariate Nelsen2Copula copula is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - t^frac1theta\n\nIt has a few special cases: \n\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Archimedean/Avaliable_Archimedean_models.html#UtilCopula","page":"Archimedean Copulas","title":"UtilCopula","text":"","category":"section"},{"location":"Archimedean/Avaliable_Archimedean_models.html","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"UtilCopula","category":"page"},{"location":"Archimedean/Avaliable_Archimedean_models.html#TwinCopulas.UtilCopula","page":"Archimedean Copulas","title":"TwinCopulas.UtilCopula","text":"UtilCopula{}\n\nConstructor\n\nUtilCopula()\n\nThe bivariate UtilCopula is a simple copula that appears as a special case of several copulas, that has the form :  \n\nC(u_1 u_2) = fracu_1u_2u_1+u_2 - u_1u_2\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = 1  (t + 1)\n\nReferences:\n\nNelsen, Roger B. An introduction to copulas. Springer, 2006.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#Extreme_models","page":"Extreme Value Copulas","title":"Extreme Values Copulas","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html#AsymLogCopula","page":"Extreme Value Copulas","title":"AsymLogCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"AsymLogCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.AsymLogCopula","page":"Extreme Value Copulas","title":"TwinCopulas.AsymLogCopula","text":"AsymLogCopula{P}\n\nFields:\n\nŒ±::Real - Dependency parameter\nŒ∏::Vector - Asymmetry parameters (size 2)\n\nConstructor\n\nAsymLogCopula(Œ±, Œ∏)\n\nThe Asymmetric bivariate Logistic copula is parameterized by one dependence parameter alpha in 1 infty and two asymmetry parameters theta_i in 01 i=12. It is an Extreme value copula with Pickands dependence function: \n\nA(t) = (theta_1^alpha(1-t)^alpha + theta_2^alphat^alpha)^frac1alpha + (theta_1 - theta_2)t + 1 - theta_1\n\nReferences:\n\nBivariate extreme value theory: models and estimation. Biometrika, 1988.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#AsymMixedCopula","page":"Extreme Value Copulas","title":"AsymMixedCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"AsymMixedCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.AsymMixedCopula","page":"Extreme Value Copulas","title":"TwinCopulas.AsymMixedCopula","text":"AsymMixedCopula{P}\n\nFields:\n\nŒ∏::Vector - parameters (size 2)\n\nConstructor\n\nAsymMixedCopula(Œ∏)\n\nThe Asymmetric bivariate Mixed copula is parameterized by two parameters theta_i i=12 that must meet the following conditions:\n\nŒ∏‚ÇÅ ‚â• 0\nŒ∏‚ÇÅ+Œ∏‚ÇÇ ‚â§ 1\nŒ∏‚ÇÅ+2Œ∏‚ÇÇ ‚â§ 1\nŒ∏‚ÇÅ+3Œ∏‚ÇÇ ‚â• 0\n\nIt is an Extreme value copula with Pickands dependence function: \n\nA(t) = theta_2t^3 + theta_1t^2-(theta_1+theta_2)t+1\n\nIt has a few special cases:\n\nWhen Œ∏‚ÇÅ = Œ∏‚ÇÇ = 0, it is the Independent Copula\nWhen Œ∏‚ÇÇ = 0, it is the Mixed Copula\n\nReferences:\n\nBivariate extreme value theory: models and estimation. Biometrika, 1988.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#BC2Copula","page":"Extreme Value Copulas","title":"BC2Copula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"BC2Copula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.BC2Copula","page":"Extreme Value Copulas","title":"TwinCopulas.BC2Copula","text":"BC2Copula{P}\n\nFields:\n\n- Œ∏1::Real - parameter\n- Œ∏1::Real - parameter\n\nConstructor\n\nBC2Copula(Œ∏1, Œ∏2)\n\nThe bivariate BC‚ÇÇ copula is parameterized by two parameters theta_i in 01 i=12. It is an Extreme value copula with Pickands dependence function: \n\nA(t) = maxtheta_1 t theta_2(1-t)  + max(1-theta_1)t (1-theta_2)(1-t)\n\nReferences:\n\nBivariate extreme-value copulas with discrete Pickands dependence measure. Springer, 2011.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#CuadrasAugeCopula","page":"Extreme Value Copulas","title":"CuadrasAugeCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"CuadrasAugeCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.CuadrasAugeCopula","page":"Extreme Value Copulas","title":"TwinCopulas.CuadrasAugeCopula","text":"CuadrasAugeCopula{P}\n\nFields:\n\n- Œ±::Real - parameter\n\nConstructor\n\nCuadrasAugeCopula(Œ±)\n\nThe bivariate Cuadras Auge copula is parameterized by alpha in 01. It is an Extreme value copula with Pickands dependence function: \n\nA(t) = maxt 1-t  + (1-theta)maxt 1-t\n\nReferences:\n\nSimulating copulas: stochastic models, sampling algorithms, and applications. 2017.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#GalambosCopula","page":"Extreme Value Copulas","title":"GalambosCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"GalambosCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.GalambosCopula","page":"Extreme Value Copulas","title":"TwinCopulas.GalambosCopula","text":"GalambosCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nGalambosCopula(Œ∏)\n\nThe bivariate Galambos copula is parameterized by alpha in 0infty). It is an Extreme value copula with Pickands dependence function: \n\nA(t) = 1 - (t^-theta+(1-t)^-theta)^-frac1theta\n\nIt has a few special cases:\n\nWhen Œ∏ = 0, it is the Independent Copula\nWhen Œ∏ = ‚àû, it is the M Copula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nOrder statistics of samples from multivariate distributions. J. Amer. Statist Assoc. 1975.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#HuslerReissCopula","page":"Extreme Value Copulas","title":"HuslerReissCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"HuslerReissCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.HuslerReissCopula","page":"Extreme Value Copulas","title":"TwinCopulas.HuslerReissCopula","text":"HuslerReissCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nHuslerReissCopula(Œ∏)\n\nThe bivariate Husler-Reiss copula is parameterized by theta in 0infty). It is an Extreme value copula with Pickands dependence function: \n\nA(t) = tPhi(theta^-1+frac12thetalog(fract1-t)) +(1-t)Phi(theta^-1+frac12thetalog(frac1-tt))\n\nWhere Phiis the cumulative distribution function (CDF) of the standard normal distribution.\n\nIt has a few special cases:\n\nWhen Œ∏ = 0, it is the Independent Copula\nWhen Œ∏ = ‚àû, it is the M Copula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nMaxima of normal random vectors: between independence and complete dependence. Statist. Probab. 1989.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#LogCopula","page":"Extreme Value Copulas","title":"LogCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"LogCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.LogCopula","page":"Extreme Value Copulas","title":"TwinCopulas.LogCopula","text":"LogCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nLogCopula(Œ∏)\n\nThe bivariate Logistic copula (or Gumbel Copula) is parameterized by theta in 1infty). It is an Extreme value copula with Pickands dependence function: \n\nA(t) = (t^theta+(1-t)^theta)^frac1theta\n\nIt has a few special cases: \n\nWhen Œ∏ = 1, it is the IndependentCopula\nWhen Œ∏ = ‚àû, is is the MCopula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nBivariate extreme value theory: models and estimation. Biometrika, 1988.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#MixedCopula","page":"Extreme Value Copulas","title":"MixedCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"MixedCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.MixedCopula","page":"Extreme Value Copulas","title":"TwinCopulas.MixedCopula","text":"MixedCopula{P}\n\nFields:\n\n- Œ∏::Real - parameter\n\nConstructor\n\nMixedCopula(Œ∏)\n\nThe bivariate Mixed copula is parameterized by alpha in 01. It is an Extreme value copula with Pickands dependence function: \n\nA(t) = theta t^2 - theta t + 1\n\nIt has a few special cases: \n\nWhen Œ∏ = 0, it is the IndependentCopula\n\nReferences:\n\nBivariate extreme value theory: models and estimation. Biometrika, 1988.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#MOCopula","page":"Extreme Value Copulas","title":"MOCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"MOCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.MOCopula","page":"Extreme Value Copulas","title":"TwinCopulas.MOCopula","text":"MOCopula{P}\n\nFields:\n\n- Œª1::Real - parameter\n- Œª2::Real - parameter\n- Œª12::Real - parameter\n\nConstructor\n\nMOCopula(Œ∏)\n\nThe bivariate Marshall-Olkin copula is parameterized by lambda_i in 0infty) i = 1 2 12. It is an Extreme value copula with Pickands dependence function: \n\nA(t) = fraclambda_1 (1-t)lambda_1 + lambda_12 + fraclambda_2 tlambda_2 + lambda_12 + lambda_12maxleft frac1-tlambda_1 + lambda_12 fractlambda_2 + lambda_12  right  \n\nReferences:\n\nSimulating copulas: stochastic models, sampling algorithms, and applications. 2017.\n\n\n\n\n\n","category":"type"},{"location":"Extreme/Avaliable_Extreme_models.html#tEVCopula","page":"Extreme Value Copulas","title":"tEVCopula","text":"","category":"section"},{"location":"Extreme/Avaliable_Extreme_models.html","page":"Extreme Value Copulas","title":"Extreme Value Copulas","text":"tEVCopula","category":"page"},{"location":"Extreme/Avaliable_Extreme_models.html#TwinCopulas.tEVCopula","page":"Extreme Value Copulas","title":"TwinCopulas.tEVCopula","text":"tEVCopula{P}\n\nFields:     - ŒΩ::Real - paremeter     - Œ∏::Real - Parameter \n\nConstructor\n\ntEVCopula(ŒΩ, Œ∏)\n\nThe bivariate extreme t copula is parameterized by nu in 0infty) and \\theta \\in (-1,1]. It is an Extreme value copula with Pickands dependence function: \n\nA(x) = xt_nu+1(Z_x) +(1-x)t_nu+1(Z_1-x)\n\nWhere t_nu + 1is the cumulative distribution function (CDF) of the standard t distribution with \\nu + 1 degrees of freedom and\n\nZ_x = frac(1+nu)^12sqrt1-theta^2left  left (fracx1-x  right )^1nu - theta right \n\nIt has a few special cases:\n\nWhen Œ∏ = 0, it is the Independent Copula\nWhen Œ∏ = ‚àû, it is the M Copula (Upper Frechet-Hoeffding bound)\n\nReferences:\n\nExtreme value properties of multivariate t copulas. Springer. 2008.\n\n\n\n\n\n","category":"type"},{"location":"index.html","page":"TwinCopulas","title":"TwinCopulas","text":"CurrentModule = TwinCopulas","category":"page"},{"location":"index.html#TwinCopulas","page":"TwinCopulas","title":"TwinCopulas","text":"","category":"section"},{"location":"index.html","page":"TwinCopulas","title":"TwinCopulas","text":"The TwinCopulas package provides an extensive collection of bivariate copulas and related tools for their manipulation and analysis. In particular, TwinCopulas implements:","category":"page"},{"location":"index.html","page":"TwinCopulas","title":"TwinCopulas","text":"Archimedean Copulas: such as Clayton's Copula, Gumbel's Copula, Frank's Copula, and more.\nElliptical Copulas: such as the Gaussian Copula and t-Student Copula.\nExtreme Value Copulas: such as the Galambos Copula, H√ºsler-Reiss Copula, and others.\nSklar Distribution: Implements Sklar's Theorem, which states that any bivariate joint distribution can be expressed in terms of its marginal distributions and a copula that describes the dependency structure between the variables.\nOther Copulas: including Archimax Copulas, Empirical Copulas, and more.\nTools for Copula Analysis: functions for sample generation, evaluation of the cumulative distribution function (CDF) and the probability density function (PDF), calculation of dependency measures, and more.","category":"page"},{"location":"index.html","page":"TwinCopulas","title":"TwinCopulas","text":"This package is designed to facilitate working with bivariate copulas in Julia, providing an intuitive and efficient interface for teaching and understanding important concepts in this area. If you need another package to investigate and work with high-dimensional data, you can see and use Copulas by Oskar Laverny and Santiago Jim√©nez (me).","category":"page"},{"location":"index.html","page":"TwinCopulas","title":"TwinCopulas","text":"TwinCopulas is specifically designed for academic environments because working in two dimensions is simpler and clearer than working in higher dimensions. This is particularly beneficial in statistical inference when maximizing functions to obtain maximum likelihood estimators, or in mathematical statistics when seeking closed-form solutions to equations. Additionally, the package aims to implement a wide range of important concepts in copula theory and dependency analysis, most of which are well-documented in the literature for two dimensions. However, this package is also suitable for generating new knowledge and intensive work, as it is natively implemented in Julia. By following the conventions of Distributions, TwinCopulas is compatible with many other packages such as Turing, StatsBase, and others, making it a versatile tool for both teaching and research.","category":"page"}]
}
